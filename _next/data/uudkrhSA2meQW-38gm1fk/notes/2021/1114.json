{"pageProps":{"html":"<!doctype html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<title>orange/note: Firefox AutoConfig</title>\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<meta name=\"author\" content=\"http://www.hatena.ne.jp/lufiabb/\">\n</head>\n<body>\n<nav>\n\t<h1>メニュー</h1>\n\t<ul>\n\t<li><a href=\"/notes/index.html\">orange/note</a></li>\n\t<li><a href=\"/notes/pc.html\">PC関連</a></li>\n\t<li><a href=\"/notes/web.html\">web製作</a></li>\n\t<li><a href=\"/notes/sec.html\">セキュリティ</a></li>\n\t<li><a href=\"/notes/hobby.html\">本・ゲーム</a></li>\n\t<li><a href=\"/notes/junk.html\">ジャンク</a></li>\n\t</ul>\n</nav>\n<main>\n\t<p class=\"revision\">2021年11月14日作成</p>\n\t<section>\n\t\t<h1>Firefox AutoConfig</h1>\n\t\t<p>Firefoxにはユーザーが任意のコードを実行できるAutoConfigという仕様があります。</p>\n\t\t<section>\n\t\t\t<h2>AutoConfigを有効にする</h2>\n\t\t\t<p>AutoConfigはFirefoxをインストールしたディレクトリ(ArchLinuxの場合は<strong>/usr/lib/firefox</strong>)以下の<strong>defaults/pref/autoconifg.js</strong>に</p>\n\t\t\t<pre><code class=\"js\">pref(&quot;general.config.filename&quot;, &quot;autoconfig.cfg&quot;);</code></pre>\n\t\t\t<p>という設定を入れておくと、<strong>autoconfig.cfg</strong>に書いた任意のJavaScriptを\n\t\t\t起動時に実行できるというものです。\n\t\t\t相対パスの場合、Firefoxをインストールしたディレクトリからのパスとして扱われます。</p>\n\t\t\t<ul>\n\t\t\t<li><a href=\"https://support.mozilla.org/en-US/kb/customizing-firefox-using-autoconfig\">Customizing Firefox Using AutoConfig</a></li>\n\t\t\t</ul>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>キーボードショートカットがどのように実装されているか</h2>\n\t\t\t<p>Firefoxの外観、タブなどはXHTMLファイルで定義されています。\n\t\t\t具体的には<strong>browser.xhtml</strong>というファイルですが、\n\t\t\tこれは<strong>omni.ja</strong>にまとめられているので展開してみましょう。</p>\n\t\t\t<pre><code class=\"console\">$ cp /usr/lib/firefox/browser/omni.ja .\n$ unzip omni.ja\n$ vi chrome/browser/content/browser/browser.xhtml</code></pre>\n\t\t\t<p>ファイルの中には、各種ショートカットキーや履歴バーの開閉処理などが定義されています。\n\t\t\t以下の定義は履歴サイドバーをトグルするショートカットです。</p>\n\t\t\t<pre><code class=\"html\">&lt;key id=&quot;key_gotoHistory&quot;\n     data-l10n-id=&quot;history-sidebar-shortcut&quot;\n     modifiers=&quot;accel&quot;\n     oncommand=&quot;SidebarUI.toggle('viewHistorySidebar');&quot;/&gt;</code></pre>\n\t\t\t<p><em>modifier=&quot;accel&quot;</em>は、<strong>about:config</strong>で</p>\n\t\t\t<pre><code>ui.key.accelKey=17(Ctrl)</code></pre>\n\t\t\t<p>に設定されたキー(デフォルトではCtrl)を押した状態を表現します。</p>\n\t\t\t<p>似たようなキーとして</p>\n\t\t\t<pre><code>ui.key.menuAccessKey=18(Alt)\nui.key.menuAccessKeyFocuses=true\nui.key.generalAccessKey=-1\nui.key.chromeAccessKey=4(Alt)\nui.key.contentAccessKey=5(Shift+Alt)</code></pre>\n\t\t\t<p>などが定義されていますが、これらはそれぞれ</p>\n\t\t\t<dl>\n\t\t\t<div>\n\t\t\t\t<dt>ui.key.menuAccessKey</dt>\n\t\t\t\t<dd>Firefoxのメニューを選択するときのキーコード</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>ui.key.menuAccessKeyFocuses</dt>\n\t\t\t\t<dd>menuAccessKey単体でメニューを開いたままにするかどうか</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt><a href=\"http://kb.mozillazine.org/Ui.key.generalAccessKey\">ui.key.generalAccessKey</a></dt>\n\t\t\t\t<dd>accesskey要素にアクセスするときのキー</dd>\n\t\t\t\t<dd>値が<em>-1</em>の場合は以下の2つが有効になる</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt><a href=\"http://kb.mozillazine.org/Ui.key.chromeAccess\">ui.key.chromeAccessKey</a></dt>\n\t\t\t\t<dd>Chrome(Firefoxのコンテンツ表示部分以外を指す)のaccesskey要素にアクセスするときのキー</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt><a href=\"http://kb.mozillazine.org/Ui.key.contentAccess\">ui.key.contentAccessKey</a></dt>\n\t\t\t\t<dd>Contentのaccesskey要素にアクセスするときのキー</dd>\n\t\t\t</div>\n\t\t\t</dl>\n\t\t\t<p>の目的で利用されるもので、どれも0を設定するとキーが無効になります。</p>\n\t\t\t<ul>\n\t\t\t<li><a href=\"https://cat-in-136.github.io/2020/02/xul-has-been-ported-to-web-components.html\">XULがWeb Componentsになったね</a></li>\n\t\t\t</ul>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>Ctrl+Hを無効にする</h2>\n\t\t\t<p>Ctrl+Hをバックスペースとして使っている癖で、履歴サイドバーが開閉してしまって\n\t\t\t不愉快だったので無効にしようと試みた記録です。結局は</p>\n\t\t\t<pre><code class=\"console\">$ gsettings set org.gnome.desktop.interface gtk-key-theme Emacs</code></pre>\n\t\t\t<p>が正解だったのですが、一応メモとして残しておきます。</p>\n\t\t\t<p>まずは<strong>/usr/lib/firefox/defaults/pref/autoconifg.js</strong>でAutoConfigを有効にします。\n\t\t\tここで<strong>sandbox_enabled</strong>を<em>false</em>にしておかないと動作しないので注意です。</p>\n\t\t\t<pre><code class=\"js\">pref(&quot;general.config.filename&quot;, &quot;autoconfig.cfg&quot;);\npref(&quot;general.config.vendor&quot;, &quot;autoconfig&quot;);\npref(&quot;general.config.obscure_value&quot;, 0);\npref(&quot;general.config.sandbox_enabled&quot;, false);</code></pre>\n\t\t\t<p>次に<strong>general.config.filename</strong>で指定したファイルを作成します。\n\t\t\t最初の1行目はコメントが必須です。</p>\n\t\t\t<pre><code class=\"js\">// disable ugly shortcut keys\ntry {\n  let { classes, interfaces, manager } = Components;\n  const { Services } = Components.utils.import('resource://gre/modules/Services.jsm');\n  function ConfigJS() {\n    Services.obs.addObserver(this, 'chrome-document-global-created', false);\n  };\n  ConfigJS.prototype = {\n    observe: function(subject) {\n      subject.addEventListener('DOMContentLoaded', this, { once: true });\n    },\n    handleEvent: function(e) {\n      let document = e.originalTarget;\n      let window = document.defaultView;\n      let location = window.location;\n      if(/^(chrome:(?!\\/\\/(global\\/content\\/commonDialog|browser\\/content\\/webext-panels)\\.x?html)|about:(?!blank))/i.test(location.href)) {\n        if(window._gBrowser){\n          let ctlh = window.document.getElementById('key_gotoHistory');\n          ctlh.remove();\n        }\n      }\n    }\n  };\n  if(!Services.appinfo.inSafeMode)\n    new ConfigJS();\n}catch(e){\n  displayError(e);\n}</code></pre>\n\t\t\t<p>これでFirefoxを再起動すれば、Ctrl+Hを押してもサイドバーは開閉しなくなります。</p>\n\t\t</section>\n\t</section>\n</main>\n<aside>\n\t<h1>やっていること</h1>\n\t<ul>\n\t<li><a href=\"/plan9/index.html\">Plan 9</a></li>\n\t<li><a href=\"http://web.me.com/lufia/alefcompiler/alef/\">Alefコンパイラを読む</a></li>\n\t</ul>\n</aside>\n<footer>\n\t<p>見れない、表示がおかしい場合は、動作環境を添えて<a href=\"mailto:webmaster@lufia.org\">webmaster@lufia.org</a>まで連絡ください。</p>\n</footer>\n</body>\n</html>\n"},"__N_SSG":true}