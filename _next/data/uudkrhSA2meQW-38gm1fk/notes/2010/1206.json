{"pageProps":{"html":"<!doctype html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<title>orange/note: SproutCoreのGUIデザイン</title>\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<meta name=\"author\" content=\"http://www.hatena.ne.jp/lufiabb/\">\n</head>\n<body>\n<nav>\n\t<h1>メニュー</h1>\n\t<ul>\n\t<li><a href=\"/notes/index.html\">orange/note</a></li>\n\t<li><a href=\"/notes/pc.html\">PC関連</a></li>\n\t<li><a href=\"/notes/web.html\">web製作</a></li>\n\t<li><a href=\"/notes/sec.html\">セキュリティ</a></li>\n\t<li><a href=\"/notes/hobby.html\">本・ゲーム</a></li>\n\t<li><a href=\"/notes/junk.html\">ジャンク</a></li>\n\t</ul>\n</nav>\n<main>\n\t<p class=\"revision\">2011年2月26日更新</p>\n\t<section>\n\t\t<h1>SproutCoreのGUIデザイン</h1>\n\t\t<section>\n\t\t\t<h2>アプリケーションタイトルの変更</h2>\n\t\t\t<p>main.jsなどから、document.titleに設定します。</p>\n\t\t\t<pre><code class=\"js\">document.title = 'blog'.loc()</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>ビューの作成</h2>\n\t\t\t<p>プロジェクトディレクトリに移動して、以下を実行すると、\n\t\t\tviews/以下にそのファイルが作成されます。</p>\n\t\t\t<pre><code class=\"console\">$ sc-gen view Blog.CategoryView</code></pre>\n\t\t\t<p>でもだいたいmain_page.jsで事足りますので、\n\t\t\tあまり使う機会はないかも。</p>\n\t\t\t<section>\n\t\t\t\t<h3>参考</h3>\n\t\t\t\t<ul>\n\t\t\t\t<li><a href=\"http://frozencanuck.wordpress.com/2009/08/16/creating-a-simple-custom-view-in-sproutcore-part2/\">Creating a Simple Custom View</a></li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>ボタン</h2>\n\t\t\t<pre><code class=\"js\">postView: SC.ButtonView.design({\n\ttitle: 'post',\n\tisEnabled: YES,\n\tisDefault: YES\n\ttarget: 'Blog.articleController',\n\taction: 'createArticle'\n})</code></pre>\n\t\t\t<p>ボタンを押したときに、\n\t\t\tBlog.articleController.createArticle()を実行します。\n\t\t\tアイコンボタンを作る場合はtitleをnullにして、\n\t\t\ticonプロパティに特定の名前を設定します。</p>\n\t\t\t<p>isDefaultをYESにすると、Enterキーを押したときに\n\t\t\t実行されるボタンになります。</p>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>リスト</h2>\n\t\t\t<figure>\n\t\t\t\t<img src=\"1206.jpg\" alt=\"SourceListViewとListViewの違い\">\n\t\t\t\t<figcaption>SourceListViewとListViewの違い</figcaption>\n\t\t\t</figure>\n\t\t\t<pre><code class=\"js\">categoriesView: SC.ScrollView.design({\n\tcontentView: SC.SourceListView.design({\n\t\texampleView: Blog.CategoryView\n\t})\n})\narticlesView: SC.ScrollView.design({\n\tcontentView: SC.ListView.design({\n\t})\n})</code></pre>\n\t\t\t<p>上記画像の左側がSourceListViewで、右が普通のListViewです。</p>\n\t\t\t<p>2行で表示する、とか、そういうCSSで対応できないような範囲で\n\t\t\t個々の見た目を変えたければ、SC.ListItemViewを拡張した型を作って、\n\t\t\tSC.ListView#exampleViewに設定します。</p>\n\t\t\t<section>\n\t\t\t\t<h3>参考</h3>\n\t\t\t\t<ul>\n\t\t\t\t<li><a href=\"http://frozencanuck.wordpress.com/2009/09/06/creating-a-simple-custom-list-item-view-part-1/\">Creating a Simple Custom List View</a></li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>ドロップダウンメニュー</h2>\n\t\t\t<pre><code class=\"js\">selectionView: SC.SelectButtonView.design({\n\ttitle: 'title',\n\tobjects: [\n\t\t{ name: 'PC等', value: 'pc' },\n\t\t{ name: 'Web製作', value: 'web' }\n\t],\n\tvalue: 'pc',\n\ttheme: 'square',\n\tnameKey: 'name',\n\tvalueKey: 'value'\n})</code></pre>\n\t\t\t<p>nameKeyを省略したときは、objects[i].toString()の値を使います。\n\t\t\t同様に、valueKeyを省略したときは、objects[i]を使います。</p>\n\t\t\t<p>valueの値がobjectsに含まれていない場合、\n\t\t\ttitleの値がボタンのタイトルに使われます。\n\t\t\tこのとき、valueの比較は===演算子により行われますので注意です。</p>\n\t\t\t<div class=\"note\">\n\t\t\t\t<p>調べると、SC.SelectViewがSC.SelectButtonViewに代わるようです。\n\t\t\t\tですが使ってみると、ドロップダウンから選択すると、\n\t\t\t\tparentMenuがnullまたはundefinedだというエラーで停止します。\n\t\t\t\tSproutCoreのメーリングリストで2010年2月頃に<a href=\"http://markmail.org/thread/cydb4g23lc35rltx\">話題に挙がり</a>、\n\t\t\t\t修正もされているような記述がありましたが、\n\t\t\t\tSproutCoreの1.4.5でもまだバグが残っている状態です。</p>\n\t\t\t</div>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>タブ</h2>\n\t\t\t<p>nowShowingをnullにすると、どのタブも選択されていない状態になります。</p>\n\t\t\t<pre><code class=\"js\">middle: SC.View.design({\n\tlayout: { top: 75, bottom: 115, left: 0, right: 0 },\n\tchildViews: 'tab'.w(),\n\n\ttab: SC.TabView.design({\n\t\tnowShowing: 'Blog.publicPage.mainView',\n\t\titems: [\n\t\t\t{\ttitle: 'public'.loc(),\n\t\t\t\tvalue: 'Blog.publicPage.mainView'\n\t\t\t},\n\t\t\t{\ttitle: 'acquisition'.loc(),\n\t\t\t\tvalue: 'Blog.privatePage.mainView'\n\t\t\t}\n\t\t],\n\t\titemTitleKey: 'title',\n\t\titemValueKey: 'value'\n\t})\n})</code></pre>\n\t\t\t<p>ここで、valueのパスはSC.Pageの名前で、\n\t\t\tそれはふつうに書いてもいいですし、sc-genを使ってもいいです。</p>\n\t\t\t<pre><code class=\"console\">$ sc-gen design Blog.publicPage</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>並び替え</h2>\n\t\t\t<p>まずはSC.Query等のクエリで対応するのが正解かなあと思いますが、\n\t\t\t使えない場合は、SC.ArrayController#orderByが便利かもしれません。</p>\n\t\t\t<pre><code class=\"js\">Blog.articlesController = SC.ArrayController.create({\n\torderBy: 'createdDate DESC, ...'\n})</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>テーブル</h2>\n\t\t\t<p>使う前に、Buildfileへsproutcore/tableを追加しておきます。</p>\n\t\t\t<pre><code class=\"js\">required =&gt; [:sproutcore, 'sproutcore/table']</code></pre>\n\t\t\t<p class=\"note\">テーブルもスクロールさせる場合は、\n\t\t\tListViewと同じようにScrollViewに含めるといいです。</p>\n\t\t\t<section>\n\t\t\t\t<h3>フォーマット</h3>\n\t\t\t\t<p>TableViewでフォーマットするには、\n\t\t\t\tTableColumnのオプションにformatterを渡します。\n\t\t\t\tこれが関数なら、その戻り値をテーブルデータに表示します。\n\t\t\t\t以下はSC.DateTimeを表示する場合。一部抜粋。</p>\n\t\t\t\t<pre><code class=\"js\">tableView: SC.TableView.design({\n\tcolumns: [\n\t\tSC.TableColumn.create({\n\t\t\tlabel: 'created date',\n\t\t\tkey: 'createdDate',\n\t\t\tformatter: function(d){\n\t\t\t\treturn d.toFormattedString('%Y/%m/%d')\n\t\t\t}\n\t\t}),\n\t\t...\n\t],\n\tcontentBinding: 'Blog.articlesController.arrangedObjects',\n\tselectionBinding: 'Blog.articlesController.selection',\n\tselectOnMouseDown: YES,\n\texampleView: SC.TableRowView\n})</code></pre>\n\t\t\t</section>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>多言語対応</h2>\n\t\t\t<p>ビューとはちょっと違うかもしれませんが、まあ見た目なので。\n\t\t\tまず言語ファイルを作成するには、以下のようにします。</p>\n\t\t\t<pre><code class=\"console\">$ sc-gen language Blog Japanese</code></pre>\n\t\t\t<p>sc-genのヘルプでは、</p>\n\t\t\t<pre><code class=\"console\"># エラーが出るよ\n$ sc-gen language Language</code></pre>\n\t\t\t<p>となっていますが、実際は違うので注意です。いちおう<a href=\"http://wiki.sproutcore.com/w/page/12413070/Todos%2008-Localizing\">Wiki</a>\n\t\t\tでは修正されているみたいですが。。</p>\n\t\t\t<p>あとは生成した言語ファイルを修正して、String#locを呼び出すだけです。\n\t\t\t個人的によく使うのは、</p>\n\t\t\t<pre><code class=\"js\">'%Y-%m-%d': '%Y/%m/%d'</code></pre>\n\t\t\t<p>と定義しておいて、'%Y-%m-%d'.loc()とか。\n\t\t\t置換パラメータを持っている場合は、</p>\n\t\t\t<pre><code class=\"js\">'post failed[code=%@]': '書き込みに失敗しました[コード=%@]'</code></pre>\n\t\t\t<p>で、locに引数を渡します。</p>\n\t\t\t<pre><code class=\"js\">throw 'post failed[code=%@]'.loc(statusCode)</code></pre>\n\t\t\t<p>こうしておくと、未対応の言語でも最低限の表示ができますので。</p>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>ドラッグアンドドロップ(並び替え)</h2>\n\t\t\t<p>コントローラと連携して対応するっぽいです。\n\t\t\tまず、コントローラをSC.CollectionViewDelegateで拡張します。</p>\n\t\t\t<pre><code class=\"js\">Blog.articlesController = SC.ArrayController.create(\n\tSC.CollectionViewDelegate, {\n\t...\n})</code></pre>\n\t\t\t<p>次に、View側でcanReorderContentとisEditableをYESに設定します。\n\t\t\t一部抜粋。</p>\n\t\t\t<pre><code class=\"js\">articlesView: SC.ScrollView.design({\n\tcontentView: SC.ListView.design({\n\t\tcontentBinding: 'Blog.articlesController.arrangedObjects',\n\t\tselectionBinding: 'Blog.articlesController.selection',\n\t\tcanReorderContent: YES,\n\t\tisEditable: YES\n\t})\n})</code></pre>\n\t\t\t<p>こうすると、該当するビュー内で、ドラッグアンドドロップを使った\n\t\t\t並び替えができるようになります。あとは必要に応じて、\n\t\t\t以下の関数を実装すれば終わりです。</p>\n\t\t\t<dl>\n\t\t\t<div>\n\t\t\t\t<dt>collectionViewDragDataTypes(view)</dt>\n\t\t\t\t<dd>ドラッグ開始時に実行される</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>collectionViewDragDataForType(view, drag, dataType)</dt>\n\t\t\t\t<dd>上記が成功したとき</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>collectionViewPerformDragOperation(view, drag, op, i, p)</dt>\n\t\t\t\t<dd>ドロップ時に発生</dd>\n\t\t\t</div>\n\t\t\t</dl>\n\t\t\t<section>\n\t\t\t\t<h3>参考ページ</h3>\n\t\t\t\t<ul>\n\t\t\t\t<li><a href=\"http://www.veebsbraindump.com/2010/11/sproutcore-tutorial-custom-listview-with-reordering/\">Custom ListView with Reordering</a></li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>ドラッグアンドドロップ(他のリストへドロップ)</h2>\n\t\t\t<p>並び替えとは少し違う形になります。</p>\n\t\t\t<section>\n\t\t\t\t<h3>ドラッグ対象側のリスト</h3>\n\t\t\t\t<pre><code class=\"js\">contentView: SC.ListView.design({\n\tdragDataTypes: [Blog.Article]\n})</code></pre>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>ドロップされる側のリスト</h3>\n\t\t\t\t<pre><code class=\"js\">contentView: SC.ListView.design({\n\tisDropTarget: YES,\n\tcomputeDragOperation: function(drag, e){\n\t\treturn SC.DRAG_ANY\n\t},\n\tacceptDragOperation: function(drag, op){\n\t\t...\n\t}\n})</code></pre>\n\t\t\t</section>\n\t\t\t<p>ドロップしたときの動作は、acceptDragOperationに記述します。</p>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>ドラッグアンドドロップ(他リスト中のアイテムへドロップ)</h2>\n\t\t\t<p>ドロップ先となるアイテムのビューをsc-genで新しく作り、\n\t\t\tそれをSC.ListItemViewで拡張したものに置き換えます。\n\t\t\tで、他のリストへドロップする場合と同じように、\n\t\t\t作成したリストへプロパティを追加すればいいです。\n\t\t\t以下ではdragEnteredとdragExitedも実装していますが、\n\t\t\tこれはあってもなくてもいいです。\n\t\t\tまた、performDragOperationでは、thisはドロップ先のアイテムです。</p>\n\t\t\t<pre><code class=\"js\">Blog.CategoryView = SC.ListItemView.extend({\n\tisDropTarget: YES,\n\tcomputeDragOperations: function(drag, e){\n\t\treturn SC.DRAG_ANY\n\t},\n\tacceptDragOperation: function(drag, op){\n\t\tvar ctlr = drag.get('source')\n\t\tvar article = ctlr.get('selection').firstObject()\n\t\tarticle.set('category', this.get('content'))\n\t\treturn YES\n\t},\n\tdragEntered: function(drag, e){\n\t\tthis.$().addClass('drop-target')\n\t},\n\tdragExited: function(drag, e){\n\t\tthis.$().removeClass('drop-target')\n\t}\n});</code></pre>\n\t\t\t<p>最後に、上記で作成したビューを\n\t\t\tドロップ先のSC.ListView#exampleViewに設定します。</p>\n\t\t\t<pre><code class=\"js\">categoriesView: SC.ScrollView.design({\n\tcontentView: SC.SourceListView.design({\n\t\texampleView: Blog.CategoryView\n\t})\n})</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>Validator</h2>\n\t\t\t<p>詳しく調べていないのでざっくりと。\n\t\t\tvalidatorはSC.Validatorを拡張して作ります。\n\t\t\tsc-genを使えないので、自分で作らなければいけません。\n\t\t\tとりあえず、main_page.jsの先頭に書くようにしています。</p>\n\t\t\t<pre><code class=\"js\">Blog.dateTimeValidator = SC.Validator.extend({\n\t...\n})</code></pre>\n\t\t\t<dl>\n\t\t\t<div>\n\t\t\t\t<dt>validate(form, field): bool</dt>\n\t\t\t\t<dd>変更時に実行される</dd>\n\t\t\t\t<dd>変更時とはchange, submit, partialのこと; partial?</dd>\n\t\t\t\t<dd>違反している場合はfalseを返すように作る</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>validateError(form, field)</dt>\n\t\t\t\t<dd>validate()がfalseの時</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>fieldValueForObject(obj, form, field)</dt>\n\t\t\t\t<dt>objectForFieldValue(value, form, field)</dt>\n\t\t\t\t<dd>いろいろ</dd>\n\t\t\t\t<dd>イメージ的にはkeydownイベントで発生してるっぽい</dd>\n\t\t\t</div>\n\t\t\t</dl>\n\t\t\t<p>ビューへ適用するには、validatorに設定します。</p>\n\t\t\t<pre><code class=\"js\">createdDateView: SC.LabelView.design({\n\tvalidator: Blog.dateTimeValidator.create({...})\n})</code></pre>\n\t\t\t<p>メールアドレスやクレジットカードなど、一般的なものは\n\t\t\tSC.Validator以下に最初から用意されています。</p>\n\t\t\t<ul>\n\t\t\t<li><a href=\"http://docs.sproutcore.com/symbols/SC.Validator.Email.html\">SC.Validator.Email</a></li>\n\t\t\t<li><a href=\"http://docs.sproutcore.com/symbols/SC.Validator.Date.html\">SC.Validator.Date</a></li>\n\t\t\t</ul>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>observes式</h2>\n\t\t\t<p>ほぼメモ。あとで清書。</p>\n\t\t\t<dl>\n\t\t\t<div>\n\t\t\t\t<dt>observes('a')のような名前だけ</dt>\n\t\t\t\t<dd>自分自身のaプロパティが変更されたら通知</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>observes('.a')またはobserves('this.a')</dt>\n\t\t\t\t<dd>同上</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>observes('a.b.c')</dt>\n\t\t\t\t<dd>グローバル変数aのプロパティbから、cが変更されたら通知</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>observes('*a.b')</dt>\n\t\t\t\t<dd>自分自身の、aまたはa.bのどちらかが変更されたら通知</dd>\n\t\t\t\t<dd>おそらく*で開始した場合のみ自分自身を起点とする</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt>observes('a.b*c.d')</dt>\n\t\t\t\t<dd>グローバル変数aのプロパティbを起点として、cかc.dに変更があれば通知</dd>\n\t\t\t</div>\n\t\t\t</dl>\n\t\t\t<p>こんなのも書けるっぽい。</p>\n\t\t\t<pre><code class=\"js\">function(){}.observes('this')</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>トラブルシューティング</h2>\n\t\t\t<section>\n\t\t\t\t<h3>selectObjectしても関連データが更新されていない</h3>\n\t\t\t\t<p>SC.ArrayController#selectObjectの直後、\n\t\t\t\t関連するSC.Bindingが更新されるわけではないようです。</p>\n\t\t\t\t<pre><code class=\"js\">Blog.articleController = SC.ObjectController.create({\n\tcontentBinding: SC.Binding\n\t\t.single('Blog.articlesController.selection')\n})</code></pre>\n\t\t\t\t<p>ここで、</p>\n\t\t\t\t<pre><code class=\"js\">Blog.articlesController.selectObject(article)\nvar p = Blog.articleController.get('content')</code></pre>\n\t\t\t\t<p>pの値は直前に選んでいた記事か、\n\t\t\t\t選んでいなければnullが設定されます。\n\t\t\t\t正しく動かすには、invoke系関数を使います。</p>\n\t\t\t\t<pre><code class=\"js\">Blog.articlesController.selectObject(article)\nBlog.articlesController.invokeLater(function(){\n\tvar p = Blog.articleController.get('content')\n})</code></pre>\n\t\t\t\t<p>または、自分でSC.RunLoop.beginとSC.RunLoop.endを\n\t\t\t\t呼び出して処理してもいいのかも。</p>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>追加や削除してもリストに反映されない</h3>\n\t\t\t\t<p>リレーションを張った状態で、\n\t\t\t\t多側の内容をコントローラに設定、\n\t\t\t\tそれをリストにバインドしていると、\n\t\t\t\tビューの更新がされません。具体的に書くと、</p>\n\t\t\t\t<pre><code class=\"js\">contentBinding: SC.Binding\n\t.single('Blog.categoriesController.selection')\n\t.transform(function(value, binding){\n\t\treturn value ? value.get('articles') : null\n\t})</code></pre>\n\t\t\t\t<p>ここで、contentはSC.ManyArray型になります。\n\t\t\t\tこの場合は変更が通知されません。\n\t\t\t\tちなみに、ビューが更新されないだけで、\n\t\t\t\t内部のデータは変更されています。</p>\n\t\t\t\t<p>次に、</p>\n\t\t\t\t<pre><code class=\"js\">contentBinding: SC.Binding\n\t.single('Blog.categoriesController.selection')\n\t.transform(function(value, binding){\n\t\tvar q = SC.Query.local(Blog.Article, 'category = {target}', {\n\t\t\ttarget: value\n\t\t})\n\t\treturn Blog.store.find(q)\n\t})</code></pre>\n\t\t\t\t<p>この場合は、contentがSC.RecordArray型になり、\n\t\t\t\t変更を反映するようになります。</p>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>変更していないけど変更したことにしたい</h3>\n\t\t\t\t<pre><code class=\"js\">obj.propertyDidChange('name')</code></pre>\n\t\t\t\t<p>enumerableContentDidChangeも気になります。</p>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>SC.DropTargetがundefined</h3>\n\t\t\t\t<p>SC.DropTargetを拡張してドラッグアンドドロップを実装していると、\n\t\t\t\tsc-serverで動かすぶんには普通に動くのですが、\n\t\t\t\tsc-buildして展開した際に、</p>\n\t\t\t\t<blockquote>Uncaught SC.Object.extend expects a non-null value.\n\t\t\t\tDid you forget to 'sc_require' something?\n\t\t\t\tOr were you passing a Protocol to extend() as if it were a mixin?</blockquote>\n\t\t\t\t<p>というエラーが出るみたいです。\n\t\t\t\tあきらめてisDropTarget版を作り直してください。</p>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>SC.SelectButtonViewの表示がvalueの値にならない</h3>\n\t\t\t\t<p>SC.SelectButtonViewの比較は===演算子なので、\n\t\t\t\tオブジェクトのアドレスが異なれば違うものとして扱われます。</p>\n\t\t\t\t<pre><code class=\"js\">SC.SelectButtonView.design({\n\tobjectsBinding: 'Blog.categoriesController.arrangedObjects',\n\tvalueBinding: 'Blog.articleController.category',\n\ttheme: 'square'\n})</code></pre>\n\t\t\t\t<p>これで通常は、valueの値にあわせて切り替わりますが、\n\t\t\t\tSC.NestedStoreが関係する場合は混乱するかもしれません。\n\t\t\t\tというのも、オリジナルのオブジェクトとNestedStoreから再取得した\n\t\t\t\tオブジェクトは異なるアドレスを持つので、\n\t\t\t\t同じ値は無いというように扱われてしまうのですね。</p>\n\t\t\t\t<p>なので、割と適当な回避策として、objectsのほうもNestedStoreから\n\t\t\t\t再取得したものでバインドしてあげると期待通りに動きます。一部抜粋。</p>\n\t\t\t\t<pre><code class=\"js\">SC.SelectButtonView.design({\n\tobjectsBinding: 'Blog.altCategoriesController.arrangedObjects'\n\tvalueBinding: 'Blog.articleController.category'\n})</code></pre>\n\t\t\t\t<p>呼び出す場所では以下のように。</p>\n\t\t\t\t<pre><code class=\"js\">var nstore = Blog.store.chain()\nvar q = SC.Query.local('Blog.Category')\nBlog.altCategoriesController.set('content', nstore.find(q))\nBlog.articleController.set('content', nstore.find(article))</code></pre>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>SC.Validator.Numberのバグ</h3>\n\t\t\t\t<p>Validator.Numberはplacesで小数点以下の桁数を指定できます。</p>\n\t\t\t\t<pre><code>validator: SC.Validator.Number.extend({ places: 1 })</code></pre>\n\t\t\t\t<p>ですが、2011年2月時点でバグがあり、文字が一切入力できません。\n\t\t\t\t仕方がないのでバグの部分だけを置き換えたものを作ります。</p>\n\t\t\t\t<pre><code class=\"js\">Vacations.DaysValidator = SC.Validator.Number.extend({\n\n\tplaces: 1,\n\n\tobjectForFieldValue: function(value, form, field){\n\t\tswitch(SC.typeOf(value)){\n\t\tcase SC.T_STRING:\n\t\t\tvalue = SC.uniJapaneseConvert(value)\n\t\t\tvalue = value.replace(/,/g, '')\n\t\t\tif(value.length === 0 || value.match(/^-$/))\n\t\t\t\tvalue = null\n\t\t\telse if(this.get('places') &gt; 0)\n\t\t\t\tvalue = parseFloat(value)\n\t\t\telse\n\t\t\t\tvalue = parseInt(value, 0)\n\t\t\tif(isNaN(value))\n\t\t\t\tvalue = ''\n\t\t\treturn value\n\t\tcase SC.T_NULL:\n\t\tcase SC.T_UNDEFINED:\n\t\tdefault:\n\t\t\treturn null\n\t\t}\n\t},\n\n\tvalidateKeyDown: function(form, field, charStr){\n\t\tvar text = field.$input().val()\n\t\tif(!text)\n\t\t\ttext = ''\n\t\ttext += charStr\n\t\tvar pass = charStr.length === 0 || charStr === '-' || charStr === '.'\n\t\tif(this.get('places') === 0){\n\t\t\tif(pass)\n\t\t\t\treturn true\n\t\t\telse{\n\t\t\t\tvar a = text.match(/^[\\-{0,1}]?[0-9,\\0]*/)\n\t\t\t\treturn a &amp;&amp; a[0] === text\n\t\t\t}\n\t\t}else{\n\t\t\tif(pass)\n\t\t\t\treturn true\n\t\t\telse{\n\t\t\t\tvar a = text.match(/^[\\-{0,1}]?[0-9,\\0]*\\.?[0-9\\0]+/)\n\t\t\t\treturn a &amp;&amp; a[0] === text\n\t\t\t}\n\t\t}\n\t}\n}</code></pre>\n\t\t\t\t<p>で、これをvalidatorに設定するとうまく動きます。</p>\n\t\t\t</section>\n\t\t</section>\n\t</section>\n</main>\n<aside>\n\t<ul>\n\t<li><a href=\"1203.html\">SproutCoreのモデル定義</a></li>\n\t</ul>\n</aside>\n<aside>\n\t<h1>やっていること</h1>\n\t<ul>\n\t<li><a href=\"/plan9/index.html\">Plan 9</a></li>\n\t<li><a href=\"http://web.me.com/lufia/alefcompiler/alef/\">Alefコンパイラを読む</a></li>\n\t</ul>\n</aside>\n<footer>\n\t<p>見れない、表示がおかしい場合は、動作環境を添えて<a href=\"mailto:webmaster@lufia.org\">webmaster@lufia.org</a>まで連絡ください。</p>\n</footer>\n</body>\n</html>\n"},"__N_SSG":true}