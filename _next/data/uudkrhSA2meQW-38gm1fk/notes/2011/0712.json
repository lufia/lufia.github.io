{"pageProps":{"html":"<!doctype html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<title>orange/note: 無線LANのセキュリティ2</title>\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<meta name=\"author\" content=\"http://www.hatena.ne.jp/lufiabb/\">\n</head>\n<body>\n<nav>\n\t<h1>メニュー</h1>\n\t<ul>\n\t<li><a href=\"/notes/index.html\">orange/note</a></li>\n\t<li><a href=\"/notes/pc.html\">PC関連</a></li>\n\t<li><a href=\"/notes/web.html\">web製作</a></li>\n\t<li><a href=\"/notes/sec.html\">セキュリティ</a></li>\n\t<li><a href=\"/notes/hobby.html\">本・ゲーム</a></li>\n\t<li><a href=\"/notes/junk.html\">ジャンク</a></li>\n\t</ul>\n</nav>\n<main>\n\t<p class=\"revision\">2011年7月12日作成</p>\n\t<section>\n\t\t<h1>無線LANのセキュリティ2</h1>\n\t\t<p>Pyritにより、<a href=\"http://blog.hidekiy.com/2011/07/crypto-pyritlan.html\">WPA2-PSKの攻撃が現実的になってきた</a>ようです。\n\t\t詳しくは上記リンクを読んでもらいつつ、\n\t\tさてPlan 9で強力なパスワードを作るには、ということで\n\t\topenssl rand -base64と(おそらく)似たプログラムを書きました。\n\t\tふつうに/dev/randomから読んでbase64エンコードしているだけですね。</p>\n\t\t<pre><code class=\"c\">#include &lt;u.h&gt;\n#include &lt;libc.h&gt;\n\n#pragma varargck type &quot;B&quot; uchar*\n\nenum {\n\tN = 3,\n\tBITS = 6,\n\tRBUFSIZE = N*8/BITS,\n};\n\n#define MASK(c, n)\t((c)&amp;((1&lt;&lt;(n))-1))\n\nchar map[] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\n\t&quot;abcdefghijklmnopqrstuvwxyz&quot;\n\t&quot;0123456789+/&quot;;\n\nvoid\nusage(void)\n{\n\tfprint(2, &quot;usage: %s [-n nbytes] [s]\\n&quot;, argv0);\n\texits(&quot;usage&quot;);\n}\n\nint\nBfmt(Fmt *fmt)\n{\n\tuchar *s;\n\tchar *buf, *p;\n\tint i, t, nbuf;\n\tint n, nbits;\n\n\tnbuf = (fmt-&gt;prec/N+1) * RBUFSIZE;\n\tbuf = malloc(nbuf+1);\n\tif(buf == nil)\n\t\tsysfatal(&quot;malloc: %r&quot;);\n\tp = buf;\n\n\tnbits = 0;\n\tn = 0;\n\ts = va_arg(fmt-&gt;args, uchar*);\n\tfor(i = 0; i &lt; fmt-&gt;prec; i++){\n\t\tn = n&lt;&lt;8 | s[i];\n\t\tnbits += 8;\n\t\twhile(nbits &gt;= BITS){\n\t\t\tt = MASK(n &gt;&gt; (nbits-BITS), BITS);\n\t\t\tnbits -= BITS;\n\t\t\tn = MASK(n, nbits);\n\t\t\tassert(t &gt;= 0 &amp;&amp; t &lt; nelem(map));\n\t\t\t*p++ = map[t];\n\t\t}\n\t}\n\tif(nbits &gt; 0){\n\t\tn &lt;&lt;= BITS-nbits;\n\t\tassert(n &gt;= 0 &amp;&amp; n &lt; nelem(map));\n\t\t*p++ = map[n];\n\t}\n\n\tt = fmt-&gt;prec%N;\n\tif(t &gt; 0)\n\t\tfor(i = 0; i &lt; N-(fmt-&gt;prec%N); i++)\n\t\t\t*p++ = '=';\n\t*p = '\\0';\n\ti = fmtprint(fmt, &quot;%s&quot;, buf);\n\tfree(buf);\n\treturn i;\n}\n\nvoid\nmain(int argc, char *argv[])\n{\n\tint fd, nbuf;\n\tuchar *buf;\n\n\tnbuf = 100;\n\tARGBEGIN {\n\tcase 'n':\n\t\tnbuf = atoi(EARGF(usage()));\n\t\tbreak;\n\tdefault:\n\t\tusage();\n\t} ARGEND\n\n\tassert(N*8 == RBUFSIZE*BITS);\n\tfmtinstall('B', Bfmt);\n\tif(argc &gt; 0)\t\t/* for debug */\n\t\tprint(&quot;%.*B\\n&quot;, strlen(argv[0]), argv[0]);\n\telse{\n\t\tbuf = malloc(nbuf);\n\t\tif(buf == nil)\n\t\t\tsysfatal(&quot;malloc: %r&quot;);\n\n\t\tfd = open(&quot;/dev/random&quot;, OREAD);\n\t\tif(fd &lt; 0)\n\t\t\tsysfatal(&quot;open: %r&quot;);\n\t\tif(readn(fd, buf, nbuf) != nbuf)\n\t\t\tsysfatal(&quot;read: %r&quot;);\n\t\tclose(fd);\n\t\tprint(&quot;%.*B\\n&quot;, nbuf, buf);\n\t\tfree(buf);\n\t}\n\texits(nil);\n}</code></pre>\n\t</section>\n</main>\n<aside>\n\t<h1>関連情報</h1>\n\t<ul>\n\t<li><a href=\"../2009/1019.html\">無線LANのセキュリティ</a></li>\n\t</ul>\n</aside>\n<aside>\n\t<h1>やっていること</h1>\n\t<ul>\n\t<li><a href=\"/plan9/index.html\">Plan 9</a></li>\n\t<li><a href=\"http://web.me.com/lufia/alefcompiler/alef/\">Alefコンパイラを読む</a></li>\n\t</ul>\n</aside>\n<footer>\n\t<p>見れない、表示がおかしい場合は、動作環境を添えて<a href=\"mailto:webmaster@lufia.org\">webmaster@lufia.org</a>まで連絡ください。</p>\n</footer>\n</body>\n</html>\n"},"__N_SSG":true}