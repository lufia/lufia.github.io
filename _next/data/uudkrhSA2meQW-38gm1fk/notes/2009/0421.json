{"pageProps":{"html":"<!doctype html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<title>orange/note: Alefコンパイラの中で出てくる型</title>\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<meta name=\"author\" content=\"http://www.hatena.ne.jp/lufiabb/\">\n</head>\n<body>\n<nav>\n\t<h1>メニュー</h1>\n\t<ul>\n\t<li><a href=\"/notes/index.html\">orange/note</a></li>\n\t<li><a href=\"/notes/pc.html\">PC関連</a></li>\n\t<li><a href=\"/notes/web.html\">web製作</a></li>\n\t<li><a href=\"/notes/sec.html\">セキュリティ</a></li>\n\t<li><a href=\"/notes/hobby.html\">本・ゲーム</a></li>\n\t<li><a href=\"/notes/junk.html\">ジャンク</a></li>\n\t</ul>\n</nav>\n<main>\n\t<p class=\"revision\">2009年4月21日作成</p>\n\t<section>\n\t\t<h1>Alefコンパイラの中で出てくる型</h1>\n\t\t<p>いろんなところに出てくる以下の型についてのメモ。</p>\n\t\t<ul>\n\t\t<li><a href=\"http://sites.google.com/site/alefcompiler/alef/port/parlh/node\">Node</a></li>\n\t\t<li><a href=\"http://sites.google.com/site/alefcompiler/alef/port/parlh/type\">Type</a></li>\n\t\t<li><a href=\"http://sites.google.com/site/alefcompiler/alef/port/parlh/sym\">Sym</a></li>\n\t\t</ul>\n\t\t<section>\n\t\t\t<h2>定数の名前規則</h2>\n\t\t\t<dl>\n\t\t\t<div>\n\t\t\t\t<dt><a href=\"http://sites.google.com/site/alefcompiler/alef/port/parlh/txxx\">TXXX系</a></dt>\n\t\t\t\t<dd>TINT, TADTなど、Tで開始するすべて大文字の定数は型(Type)が扱います。</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt><a href=\"http://sites.google.com/site/alefcompiler/alef/port/parlh/oadd\">OXXX系</a></dt>\n\t\t\t\t<dd>OADD, OINDなど、Oで開始するすべて大文字の定数はノード(Node)が扱います。</dd>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<dt><a href=\"http://sites.google.com/site/alefcompiler/alef/port/parl-y\">Txxx系</a></dt>\n\t\t\t\t<dd>Tint, Tstorageなど、Tで開始し残りは小文字の定数は、文法的な意味型です。</dd>\n\t\t\t\t<dd>これをもとにyaccが解析します。</dd>\n\t\t\t</div>\n\t\t\t</dl>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>Node</h2>\n\t\t\t<p>Nodeは構文木です。\n\t\t\tAlef言語のプログラムを、主にtype, left, rightというメンバー変数で扱います。\n\t\t\tたとえば、1+1という式の場合、およそ下記のイメージ。</p>\n\t\t\t<pre><code class=\"c\">Node = {\n\t.type = OADD\n\t.left = {\n\t\t.type = OCONST\n\t\t.ival = 1\n\t}\n\t.right = {\n\t\t.type = OCONST\n\t\t.ival = 1\n\t}</code></pre>\n\t\t\t<p>式だけではなく、ifやforなどの文、adtの宣言などもすべてNodeで表します。</p>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>Type</h2>\n\t\t\t<p>Typeはプログラムに現れる型。\n\t\t\t基本型の場合は単体で完結した型となります(nextがnil)。\n\t\t\t派生型の場合は、まずポインタ(type=TIND)、配列(type=TARRAY)などで表現し、\n\t\t\tnextにおいてその具体的な型を指します。adtなども同様。</p>\n\t\t\t<p>int*の場合。</p>\n\t\t\t<pre><code class=\"c\">Type = {\n\t.type = TIND\n\t.next = {\n\t\t.type = TINT\n\t\t.next = nil\n\t}\n}</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>Sym</h2>\n\t\t\t<p>プログラムで現れるすべてのシンボルです。\n\t\t\tたとえば、変数名、関数名、型名、ifやforなどの予約語。gotoラベルなど。\n\t\t\tそれぞれの違いは、lexvalメンバー変数で区別します。\n\t\t\t変数の場合はTid, 型名はTtypename, ほか予約語ならTintやTif。</p>\n\t\t\t<p>すべてシンボルテーブルに格納され、同じ名前は1つしか存在しません。\n\t\t\tブロック内変数の扱いは次回。\n\t\t\tSym.instanceと<a href=\"http://sites.google.com/site/alefcompiler/alef/port/parlh/tinfo\">Tinfo</a>を\n\t\t\tうまく扱うことで実現しています。</p>\n\t\t\t<pre><code class=\"c\">{\n\tint i, j;\n\n\t{\n\t\tint i;\t\t/* ここでiはブロック外のiとは別の変数 */\n\t}\n}</code></pre>\n\t\t</section>\n\t</section>\n</main>\n<aside>\n\t<h1>やっていること</h1>\n\t<ul>\n\t<li><a href=\"/plan9/index.html\">Plan 9</a></li>\n\t<li><a href=\"http://web.me.com/lufia/alefcompiler/alef/\">Alefコンパイラを読む</a></li>\n\t</ul>\n</aside>\n<footer>\n\t<p>見れない、表示がおかしい場合は、動作環境を添えて<a href=\"mailto:webmaster@lufia.org\">webmaster@lufia.org</a>まで連絡ください。</p>\n</footer>\n</body>\n</html>\n"},"__N_SSG":true}