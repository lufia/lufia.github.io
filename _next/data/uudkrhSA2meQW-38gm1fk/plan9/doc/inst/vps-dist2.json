{"pageProps":{"html":"<!doctype html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<title>Plan 9: さくらVPSでPlan 9ネットワークを構成してみた</title>\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<meta name=\"author\" content=\"http://www.hatena.ne.jp/lufiabb/\">\n</head>\n<body>\n<nav>\n\t<h1>メニュー</h1>\n\t<ul>\n\t<li><a href=\"/plan9/index.html\">Plan 9</a></li>\n\t<li><a href=\"/plan9/doc/inst/index.html\">インストール</a></li>\n\t<li><a href=\"/plan9/doc/guide/index.html\">システムの使い方</a></li>\n\t<li><a href=\"/plan9/doc/devel/index.html\">プログラミング</a></li>\n\t<li><a href=\"/plan9/doc/adm/index.html\">システム管理</a></li>\n\t<li><a href=\"/plan9/man/index.html\">自作ツール集</a></li>\n\t</ul>\n</nav>\n<main>\n\t<p class=\"revision\">2014年5月5日作成</p>\n\t<section>\n\t\t<h1>さくらVPSでPlan 9ネットワークを構成してみた</h1>\n\t\t<section>\n\t\t\t<h2>認証サーバの構成</h2>\n\t\t\t<section>\n\t\t\t\t<h3>カーネルのインストール</h3>\n\t\t\t\t<p>まずはpcauthカーネルのインストール。\n\t\t\t\tですが、標準のpcauthはetherigbeを含んでいないので、\n\t\t\t\t自分で足してからコンパイルが必要です。\n\t\t\t\tpcfカーネルあたりを真似て、etherigbeの行をpcauthへ足しましょう。</p>\n\t\t\t\t<pre><code class=\"console\">auth% cd /sys/src/9/pc\nauth% mk 'CONF=pcauth'\nauth% 9fat:\nauth% mv 9pcauth /n/9fat/</code></pre>\n\t\t\t\t<p>いつものように<strong>plan9.ini</strong>へ追加します。</p>\n\t\t\t\t<pre><code class=\"ini\">bootargs=tcp ether /net/ether1 add 192.168.1.7 255.255.255.0\nsysname=auth\nfs=192.168.1.3\nauth=192.168.1.7\nconsole=0 b115200 b8 pn s1</code></pre>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>サービス準備</h3>\n\t\t\t\t<p>次に<strong>/cfg/auth/cpurc</strong>です。\n\t\t\t\t認証サーバなのでauth/keyfs等を動作させます。</p>\n\t\t\t\t<pre><code class=\"sh\">ip/ipconfig -x.alt -g $ipgw /net.alt/ether0 add 133.242.bbb.bbb 255.255.254.0\naux/timesync -f\n\nndb/dns -r\nauth/keyfs -wp -m /mnt/keys /adm/keys &gt;/dev/null &gt;[2=1]\nauth/cron &gt;&gt;/sys/log/cron &gt;[2=1] &amp;amp;\nauth/secstored\naux/listen -q -t /cfg/$sysname/service.auth -d /cfg/$sysname/service tcp\n\nndb/cs -x.alt -f /lib/ndb/external\nndb/dns -rx.alt -f /lib/ndb/external\naux/listen -q -t /cfg/$sysname/service.alt.auth /net.alt/tcp\nsleep 3</code></pre>\n\t\t\t\t<p><strong>service.auth</strong>と<strong>service.alt.auth</strong>に<strong>tcp567</strong>をコピーしておきます。</p>\n\t\t\t\t<p>namespaceはファイルサーバと同じ。authファイルの更新も。</p>\n\t\t\t\t<pre><code class=\"console\">auth% cat /cfg/auth/namespace\nbind -a #l0 /net.alt\nbind -a #I1 /net.alt\nauth% cat /lib/ndb/auth\nhostid=bootes\n\tuid=!sys uid=!adm uid=*</code></pre>\n\t\t\t\t<p>終わったらコントロールパネルから再起動。</p>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>IPプロトコルスタックについて(余談)</h3>\n\t\t\t\t<p>Plan 9はIPプロトコルスタックを分ける事ができます。\n\t\t\t\tプロトコルスタックはカーネルデバイス#I0から#I15まで存在します。\n\t\t\t\t今回構成しているサーバは<strong>/net</strong>と<strong>/net.alt</strong>を分けて使っています。\n\t\t\t\tこれは内部からのみアクセスするサービス(<strong>/net</strong>)と\n\t\t\t\t外部からのアクセス(<strong>/net.alt</strong>)を分ける事が目的です。\n\t\t\t\tさくらVPSはルータやファイアウォールがありませんので、このようにしています。</p>\n\t\t\t\t<p>このプロトコルスタックを使い分ける時は、\n\t\t\t\t通常tcp!host!portとするところを、/net.alt/tcp!host!portとします。\n\t\t\t\tアドレスが/からはじまらない場合は/net/が使われます。\n\t\t\t\tアドレスのルールは<a href=\"https://9p.io/magic/man2html/2/announce\">announce(2)</a>に記述されています。</p>\n\t\t\t\t<p>最後に<strong>plan9.ini</strong>のbootargsエントリとip/ipconfigは、\n\t\t\t\t若干-xオプションの挙動が異なります。\n\t\t\t\tip/ipconfigは、以下どちらも同じように<strong>/net.alt</strong>を使います。</p>\n\t\t\t\t<pre><code class=\"sh\">ip/ipconfig -x .alt\nip/ipconfig -x /net.alt</code></pre>\n\t\t\t\t<p>これは<a href=\"https://9p.io/magic/man2html/2/setnetmtpt\">setnetmtpt(2)</a>の動作で、/からはじまらない名前は\n\t\t\t\t/netという文字列を名前の先頭に加えるからです。\n\t\t\t\tしかしbootargsエントリは、</p>\n\t\t\t\t<pre><code class=\"ini\">bootargs=tcp -x .alt ...\nbootargs=tcp -x /net.alt ...</code></pre>\n\t\t\t\t<p>なぜかカーネルの中で、無条件に/netを先頭へ追加していました。\n\t\t\t\tなので上の例は動作しますが、下の例では<strong>/net/net.alt</strong>が無いのでこけます。</p>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>再起動とユーザ登録</h3>\n\t\t\t\t<p>VPSコントロールパネルから再起動させて、<strong>9pcauth</strong>カーネルで起動させます。\n\t\t\t\tファイルサーバと同じ内容でbootesのパスワードなどを設定して、\n\t\t\t\t認証サーバ上にもユーザを作成して終わり。</p>\n\t\t\t\t<pre><code class=\"console\">auth# auth/changeuser -p bootes</code></pre>\n\t\t\t\t<p>secstoreも使うなら、secstoreユーザの登録も忘れずに。</p>\n\t\t\t\t<pre><code class=\"console\">auth# auth/secuser -v bootes</code></pre>\n\t\t\t</section>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>CPUサーバの構成</h2>\n\t\t\t<p>だいたい他のサーバと同じですが、CPUサーバの場合は\n\t\t\t内部だけで閉じたいサービスが無いので、\n\t\t\t両方のNICを/netにまとめて使うようにします。</p>\n\t\t\t<section>\n\t\t\t\t<h3>カーネルのインストール</h3>\n\t\t\t\t<p>コンフィグが違う以外はだいたい同じ。</p>\n\t\t\t\t<pre><code class=\"console\">cpu% mk 'CONF=pccpu'\ncpu% mv 9pccpu /n/9fat/</code></pre>\n\t\t\t\t<p><strong>plan9.ini</strong>に以下を追加。</p>\n\t\t\t\t<pre><code class=\"ini\">bootfile=sdC0!9fat!9pccpu\nbootargs=tcp -g $ipgw ether /net/ether1 add 192.168.1.23 255.255.255.0\nsysname=cpu\nfs=192.168.1.3\nauth=192.168.1.7</code></pre>\n\t\t\t\t<p><strong>namespace</strong>は<strong>/net</strong>しか使わないのでシンプルです。</p>\n\t\t\t\t<pre><code class=\"console\">cpu% cat /cfg/cpu/namespace\nbind -a #l /net</code></pre>\n\t\t\t\t<p><strong>cpurc</strong>も同じように<strong>/net</strong>しか使いません。</p>\n\t\t\t\t<pre><code class=\"console\">cpu% cat /cfg/cpu/cpurc\nip/ipconfig ether /net/ether0 add 133.242.ccc.ccc 255.255.254.0\naux/timesync -f\nndb/dns -r\naux/listen -q -d /cfg/$sysname/service tcp\nsleep 3</code></pre>\n\t\t\t\t<p>cpuサービスを実行させるために、<strong>tcp17010</strong>を<strong>/cfg/$sysname/service</strong>へコピー。</p>\n\t\t\t\t<pre><code class=\"console\">cpu% cp /rc/bin/service/tcp17010 /cfg/$sysname/service/</code></pre>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<h3>再起動</h3>\n\t\t\t\t<p>コントロールパネルから再起動して、bootesを登録したら終わりです。\n\t\t\t\tこれでdrawtermからアクセスすれば動作するはず。</p>\n\t\t\t</section>\n\t\t</section>\n\t</section>\n</main>\n<footer>\n\t<p>見れない、表示がおかしい場合は、動作環境を添えて<a href=\"mailto:webmaster@lufia.org\">webmaster@lufia.org</a>まで連絡ください。</p>\n</footer>\n</body>\n</html>\n"},"__N_SSG":true}