{"pageProps":{"html":"<!doctype html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<title>Plan 9: 64bit環境(9kカーネル)を構築する</title>\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<meta name=\"author\" content=\"http://www.hatena.ne.jp/lufiabb/\">\n</head>\n<body>\n<nav>\n\t<h1>メニュー</h1>\n\t<ul>\n\t<li><a href=\"/plan9/index.html\">Plan 9</a></li>\n\t<li><a href=\"/plan9/doc/inst/index.html\">インストール</a></li>\n\t<li><a href=\"/plan9/doc/guide/index.html\">システムの使い方</a></li>\n\t<li><a href=\"/plan9/doc/devel/index.html\">プログラミング</a></li>\n\t<li><a href=\"/plan9/doc/adm/index.html\">システム管理</a></li>\n\t<li><a href=\"/plan9/man/index.html\">自作ツール集</a></li>\n\t</ul>\n</nav>\n<main>\n\t<p class=\"revision\">2016年5月6日作成</p>\n\t<section>\n\t\t<h1>64bit環境(9kカーネル)を構築する</h1>\n\t\t<p>Plan 9からforkしたプロジェクトがいくつかありますが、\n\t\tここではベル研のPlan 9と9legacyを使います。</p>\n\t\t<section>\n\t\t\t<h2>ソースコードの更新</h2>\n\t\t\t<p>最初に、<a href=\"../adm/update.html\">replica/pullを使って</a>、本家最新のソースに更新しておいてください。</p>\n\t\t\t<p>2015年1月以降、本家が更新されていないので、<a href=\"https://9legacy.org/patch.html\">9legacyのパッチ集</a>から取得します。\n\t\t\t現時点で、<a href=\"https://github.com/lufia/9legacy-tool/blob/master/misc/patchlist\">64bit環境の動作が確認できたパッチ一覧</a>です。\n\t\t\t上から順番に適用すれば依存関係も解決します。\n\t\t\tこのリポジトリには、9legacyのパッチ管理を少し便利にする、\n\t\t\t簡単なrcスクリプトも含んでいますので、よければどうぞ。</p>\n\t\t\t<div class=\"note\">\n\t\t\t\t<p>9legacy-toolを使う場合、</p>\n\t\t\t\t<pre><code class=\"console\">% 9legacy/installall misc/patchlist\n% 9legacy/apply</code></pre>\n\t\t\t\t<p>とすれば<strong>/sys</strong>以下のファイルに9legacyパッチ後のファイルをbindします。</p>\n\t\t\t</div>\n\t\t\t<p>また、以下の手順では<strong>/amd64</strong>以下にファイルを作成しますので、\n\t\t\t作業するユーザはsysグループに属する必要があります。\n\t\t\tfossilの場合は、</p>\n\t\t\t<pre><code class=\"console\">% con -l /srv/fscons\nprompt: uname sys +bootes</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>6cコンパイラの更新</h2>\n\t\t\t<p>Runeが、2013年頃に16bitから22bitへアップデートされていますが、\n\t\t\t配布物に含まれる6cコンパイラのバージョンは古いままです。\n\t\t\t古いままだとコンパイル時に</p>\n\t\t\t<blockquote>runebase.c:xx illegal rune string</blockquote>\n\t\t\t<p>と言って怒られるので先にコンパイラの更新が必要です。\n\t\t\tこの時は、objtypeは現在使っている値(例えば386)のままで構いません。</p>\n\t\t\t<pre><code class=\"console\">% cd /sys/src/cmd/6c\n% mk install\n\n# 後処理\n% mk nuke\n% cd ../cc\n% mk nuke</code></pre>\n\t\t\t<p>9legacyのパッチでアセンブラがサポートする命令も増えているので、\n\t\t\tアセンブラとリンカも更新します。</p>\n\t\t\t<pre><code class=\"console\"># アセンブラ\n% cd /sys/src/cmd/6a\n% mk install\n% mk nuke\n\n# リンカ\n% cd /sys/src/cmd/6l\n% mk install\n% mk nuke</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>各種ライブラリの作成</h2>\n\t\t\t<p>amd64環境のコマンド等からリンクされるライブラリを作成します。\n\t\t\tライブラリは、mk nukeすると\n\t\t\t作成された<strong>/$objtype/lib/*.a</strong>ファイルも消えてしまうため、\n\t\t\tコンパイル時の中間ファイルを掃除するのはmk cleanを使いましょう。</p>\n\t\t\t<p class=\"note\">objtype環境変数を切り替えると、コンパイラが生成するオブジェクトの\n\t\t\tターゲットとなるアーキテクチャを切り替えられます。</p>\n\t\t\t<pre><code class=\"console\">% cd /sys/src\n% objtype=amd64\n% mk libs  # installとcleanを実行します</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>APE環境の作成</h2>\n\t\t\t<p>gs等、いくつかのコマンドをコンパイルする時に\n\t\t\tape/pcc等を使うので用意しておきましょう。</p>\n\t\t\t<pre><code class=\"console\"># apeライブラリ\n% mkdir /amd64/lib/ape\n% cd /sys/src/ape\n% mk lib.install\n% mk lib.clean\n\n# apeコマンド等\n% mkdir /amd64/lib/ape\n% mk cmd.install\n% mk cmd.nuke\n% mk 9src.install\n% mk 9src.nuke</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>acme用コマンド</h2>\n\t\t\t<p>ほとんどのコマンドは<strong>/sys/src</strong>以下にソースがありますけど、\n\t\t\tacme用のコマンドは<strong>/acme/*/src</strong>に配置されています。</p>\n\t\t\t<pre><code class=\"console\">% mkdir /acme/bin/amd64\n% cd /acme\n% mk install\n% mk nuke</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>コマンド類</h2>\n\t\t\t<p>ライブラリの準備ができたので、コマンドをビルドします。\n\t\t\tカーネルの内部に一部のコマンドを埋め込むため、\n\t\t\t先にコマンドのインストールが必要です。</p>\n\t\t\t<pre><code class=\"console\">% mkdir -p /amd64/bin/ ^ (aux auth dial disk fossil fs ip/httpd ndb replica upas usb venti)\n% cd /sys/src/cmd\n\n# upasグループに作業ユーザを追加するか、\n# 以下2ファイルに/tmpをbindする等で書き込み可能にしておく\n# /mail/lib/gone.msg\n# /mail/lib/gone.fishing\n\n% mk install\n% mk nuke</code></pre>\n\t\t\t<div class=\"note\">\n\t\t\t\t<p>9legacy-toolを使った場合、initだけはbind先に作成されてしまうので、\n\t\t\t\tmk後に手動で移動させておきましょう。</p>\n\t\t\t\t<pre><code class=\"console\">% unmount /amd64\n% cp $home/9legacy/plan9/amd64/init /amd64/init</code></pre>\n\t\t\t</div>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>ゲーム(不要なら飛ばす)</h2>\n\t\t\t<pre><code class=\"console\">% mkdir /amd64/bin/games\n% cd /sys/src/games\n% mk install\n% mk nuke</code></pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>カーネル</h2>\n\t\t\t<p>ブートローダの更新が必要なら<strong>/sys/src/9k/boot</strong>にソースがありますけれど、\n\t\t\t<strong>/sys/src/9</strong>以下の内容と同じなので何もしなくても構いません。</p>\n\t\t\t<p>CPUサーバカーネルの場合は<strong>k10cpu</strong>コンフィグを使います。\n\t\t\tただ、<strong>k10cpu</strong>にはsdドライバが含まれていないので<strong>/dev/sd*/nvram</strong>を読めません。\n\t\t\t通常それは困るため、sdドライバを入れましょう。</p>\n\t\t\t<pre><code>dev +dev\n\troot\n\t...\n\tsd\t\t# 追加\n\nsd +dev\t# 追加\n\tsdata\tpci sdscsi\n\tsdiahci\tpci sdscsi\n...\nrootdir\n\tbootk10f.out boot\n\t/amd64/bin/auth/factotum factotum\n\t/amd64/bin/ip/ipconfig ipconfig\n#\t../root/nvram nvram\t# 削除</code></pre>\n\t\t\t<p>最後にコンパイルして終わり。</p>\n\t\t\t<pre><code class=\"console\">% cd /sys/src/9k/k10\n% chmod +x ../mk/mkrootall\n% mk 'CONF=k10cpu'\n% 9fat:\n% cp 9k10cpu /n/9fat\n% mk 'CONF=k10cpu' nuke</code></pre>\n\t\t</section>\n\t</section>\n</main>\n<footer>\n\t<p>見れない、表示がおかしい場合は、動作環境を添えて<a href=\"mailto:webmaster@lufia.org\">webmaster@lufia.org</a>まで連絡ください。</p>\n</footer>\n</body>\n</html>\n"},"__N_SSG":true}