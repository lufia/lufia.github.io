{"pageProps":{"html":"<!doctype html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<title>Plan 9: 正当な証明書を扱う</title>\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<meta name=\"author\" content=\"http://www.hatena.ne.jp/lufiabb/\">\n</head>\n<body>\n<nav>\n\t<h1>メニュー</h1>\n\t<ul>\n\t<li><a href=\"/plan9/index.html\">Plan 9</a></li>\n\t<li><a href=\"/plan9/doc/inst/index.html\">インストール</a></li>\n\t<li><a href=\"/plan9/doc/guide/index.html\">システムの使い方</a></li>\n\t<li><a href=\"/plan9/doc/devel/index.html\">プログラミング</a></li>\n\t<li><a href=\"/plan9/doc/adm/index.html\">システム管理</a></li>\n\t<li><a href=\"/plan9/man/index.html\">自作ツール集</a></li>\n\t</ul>\n</nav>\n<main>\n\t<p class=\"revision\">2014年5月2日更新</p>\n\t<section>\n\t\t<h1>正当な証明書を扱う</h1>\n\t\t<section>\n\t\t\t<h2>前置き</h2>\n\t\t\t<p>正当と書いていいのか悩ましいですが、\n\t\t\tいわゆる自己署名でない証明書のことです。\n\t\t\t認証局に署名リクエストを出すとき、CSRが必要になりますが、\n\t\t\tPlan 9には、CSRを作るためのコマンドが無さそうです。\n\t\t\t<em>auth/rsa2x509</em>では自己署名になってしまうので使えません。\n\t\t\tPlan 9の秘密鍵をUnixで理解できる形に変換して、\n\t\t\tUnix(openssl)でCSRを作る方法も調べましたが、\n\t\t\t全く情報がありませんでした。</p>\n\t\t\t<p>最終的に、Unixで作った鍵をPlan 9で読み込む方法を採用しました。</p>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>鍵の作成</h2>\n\t\t\t<p>Unixで作業をします。\n\t\t\tパスフレーズ付きの鍵では、どうやらPlan 9は読めない様子。\n\t\t\tなので、安易だけれどパスフレーズを解除した状態で渡します。</p>\n\t\t\t<pre><code class=\"console\">unix$ openssl genrsa -aes128 2048 &gt;private.key\nunix$ openssl genrsa -aes256 4096 &gt;private.key\nEnter pass phrase:\nVerifying - Enter pass phrase:\nunix$ openssl rsa -in private.key -out u.key</code></pre>\n\t\t\t<p>安全な方法で鍵をPlan 9側へコピーします。\n\t\t\tここでは<em>drawterm</em>を使いましたが実際なんでもいいです。</p>\n\t\t\t<pre><code class=\"console\">unix$ drawterm -a a.lufia.org -c c.lufia.org -u bootes\n# ramfs -p\n# cp /mnt/term/Users/lufia/u.key /tmp/u.key</code></pre>\n\t\t\t<p><em>drawterm</em>を使って<strong>bootes</strong>ユーザで<em>auth/secstore</em>すると、\n\t\t\t<em>drawterm</em>側ではなくcpuサーバのコンソール側(!)で\n\t\t\tパスワードを待ち受けるようになって困るので、\n\t\t\t以下はコンソールから作業します。</p>\n\t\t\t<pre><code class=\"console\"># cd /tmp\n# auth/pemdecode ‘RSA PRIVATE KEY’ u.key |\n&gt; auth/asn12rsa -t ‘service=tls role=client owner=*’ &gt;key\n# auth/secstore -g factotum\n# cat key &gt;&gt;factotum\n# auth/secstore -p factotum\n# rm factotum key u.key</code></pre>\n\t\t\t<p>マニュアルによると、<em>asn12rsa</em>した後の出力にある<strong>!p=</strong>と<strong>!q=</strong>の値が\n\t\t\t素数ペアになっているようですね。</p>\n\t\t\t<p>これで、Unixのパスフレーズ無し鍵はいらなくなったので消しましょう。</p>\n\t\t\t<pre><code class=\"console\">unix$ rm u.key</code></pre>\n\t\t\t<p>パスフレーズ有り版の鍵は証明書作成(更新も？)で使うので、\n\t\t\t大切に保管しておきましょう。</p>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>CSR作成と申請</h2>\n\t\t\t<p>Plan 9上に秘密鍵と公開鍵が残せたので、あとはUnixでCSRを作成します。</p>\n\t\t\t<pre><code class=\"console\">unix$ openssl req -new -key private.key &gt;a.csr\nEnter pass phrase for key:</code></pre>\n\t\t\t<p>この後、いくつか質問されますが、大切なところは、\n\t\t\tCommon Nameを証明書申請するドメイン名にすること。\n\t\t\t他の項目は認証局のサイトにある説明をよく読んで入力しましょう。\n\t\t\tRapidSSLでは、拡張情報・チャレンジパスワードを入力してはいけません。</p>\n\t\t\t<p>CSRを作り終わったら認証局へ申請します。\n\t\t\tRapidSSLの場合は、フォームに<strong>a.csr</strong>の内容をコピペして、\n\t\t\tサーバの種類を選ぶ場所で「その他」を選んでおくといいでしょう。</p>\n\t\t\t<p>その後「SSLサーバ証明書発行完了のお知らせ」というメールが届いたら、\n\t\t\tメール本文の中ほどにある「SSLサーバ証明書(X.509形式)」の\n\t\t\t<strong>BEGIN CERTIFICATE</strong>から<strong>END CERTIFICATE</strong>まで(含む)をPlan 9へ送ります。\n\t\t\t秘密鍵と異なり、公開情報なので送る方法はなんでもかまいません。\n\t\t\tファイル末尾に改行がない場合、Plan 9は読んでくれないので\n\t\t\t改行までをコピーするように注意してください。</p>\n\t\t\t<p>最後に、所定の場所へ配置して終わり。</p>\n\t\t\t<pre><code class=\"console\"># con -l /srv/fscons\nprompt: fsys main create /active/sys/lib/tls/cert.pem sys sys 664\n# cp cert /sys/lib/tls/cert.pem</code></pre>\n\t\t</section>\n\t</section>\n</main>\n<aside>\n\t<h1>参考ページ</h1>\n\t<ul>\n\t<li><a href=\"http://bearmini.hatenablog.com/entry/2014/02/05/143510\">RSA 秘密鍵/公開鍵ファイルのフォーマット</a></li>\n\t<li><a href=\"lego.html\">legoを使った証明書更新</a></li>\n\t</ul>\n</aside>\n<footer>\n\t<p>見れない、表示がおかしい場合は、動作環境を添えて<a href=\"mailto:webmaster@lufia.org\">webmaster@lufia.org</a>まで連絡ください。</p>\n</footer>\n</body>\n</html>\n"},"__N_SSG":true}